# Stage 1: Base image for all stages
FROM harbor.tools.company.com/public-cache/library/node:18-alpine AS base

ARG NPM_TOKEN
ENV NPM_TOKEN=${NPM_TOKEN}
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

# Fix repository URLs and install libc6-compat
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.edge.kernel.org/g' /etc/apk/repositories && \
    apk add --no-cache libc6-compat

# Stage 2: Install npm dependencies
FROM base AS deps

# Copy only package.json and package-lock.json to install dependencies
COPY package.json package-lock.json ./
RUN npm ci

# Copy the rest of the application code
COPY . .

# Stage 3: Build the Next.js application
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Copy the installed dependencies from the deps stage
COPY --from=deps /app/node_modules ./node_modules

# Build the Next.js application
RUN npm run build

# Stage 4: Final production image
FROM harbor.tools.company.com/public-cache/library/node:18-alpine AS runner
WORKDIR /app

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

# Copy necessary files from the builder stage
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public
COPY --from=builder /app/pages ./pages


# Set permissions to the non-root user
USER nextjs

# Expose the application port
EXPOSE 3000

# Start the Next.js application using the custom server
CMD ["node", "server.js"]
